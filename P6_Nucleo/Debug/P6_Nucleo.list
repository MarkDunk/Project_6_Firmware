
P6_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d9c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f68  08003f68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f68  08003f68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f68  08003f68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f68  08003f68  00013f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000011c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ae7f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000018a7  00000000  00000000  0002aefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007d8  00000000  00000000  0002c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000603  00000000  00000000  0002cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f406  00000000  00000000  0002d583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a5fd  00000000  00000000  0004c989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000befe9  00000000  00000000  00056f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f74  00000000  00000000  00115f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00117ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003f18 	.word	0x08003f18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003f18 	.word	0x08003f18

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fbe2 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f8ae 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f9ba 	bl	8000558 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f988 	bl	80004f8 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001e8:	f000 f906 	bl	80003f8 <MX_CAN_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if (RxData[0] != 0) {
 80001ec:	4b4c      	ldr	r3, [pc, #304]	; (8000320 <main+0x14c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d024      	beq.n	800023e <main+0x6a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  											// Turn on LED2
 80001f4:	2120      	movs	r1, #32
 80001f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fa:	f001 fd5f 	bl	8001cbc <HAL_GPIO_TogglePin>
		HAL_Delay(500);					    											// Keep LED on for 2 seconds
 80001fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000202:	f000 fc33 	bl	8000a6c <HAL_Delay>
		for (i=0; i<8; i++) {
 8000206:	4b47      	ldr	r3, [pc, #284]	; (8000324 <main+0x150>)
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
 800020c:	e00b      	b.n	8000226 <main+0x52>
		  RxData[i] = 0x00;																	// Reset the RxData[] buffer (used as flag)
 800020e:	4b45      	ldr	r3, [pc, #276]	; (8000324 <main+0x150>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	4b42      	ldr	r3, [pc, #264]	; (8000320 <main+0x14c>)
 8000216:	2100      	movs	r1, #0
 8000218:	5499      	strb	r1, [r3, r2]
		for (i=0; i<8; i++) {
 800021a:	4b42      	ldr	r3, [pc, #264]	; (8000324 <main+0x150>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3301      	adds	r3, #1
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b40      	ldr	r3, [pc, #256]	; (8000324 <main+0x150>)
 8000224:	701a      	strb	r2, [r3, #0]
 8000226:	4b3f      	ldr	r3, [pc, #252]	; (8000324 <main+0x150>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b07      	cmp	r3, #7
 800022c:	d9ef      	bls.n	800020e <main+0x3a>
		}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  											// Turn off LED2
 800022e:	2120      	movs	r1, #32
 8000230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000234:	f001 fd42 	bl	8001cbc <HAL_GPIO_TogglePin>
		HAL_Delay(100);																		// Need a delay after toggle
 8000238:	2064      	movs	r0, #100	; 0x64
 800023a:	f000 fc17 	bl	8000a6c <HAL_Delay>
	 }

	  if (BUTTON != 0) {
 800023e:	4b3a      	ldr	r3, [pc, #232]	; (8000328 <main+0x154>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0d2      	beq.n	80001ec <main+0x18>
		  if (BUTTON == 1) {												// Blue button pressed --> Turn on LED2 for 2 seconds and Transmit message
 8000246:	4b38      	ldr	r3, [pc, #224]	; (8000328 <main+0x154>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d11e      	bne.n	800028c <main+0xb8>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);  										// Turn on LED2															// Leave it on for 2 seconds
 800024e:	2110      	movs	r1, #16
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f001 fd32 	bl	8001cbc <HAL_GPIO_TogglePin>
			 TxData[0] = GO_TO_FLOOR_1;																// Store the 1 character message to transmit into the TxData buffer and transmit over the CAN bus
 8000258:	4b34      	ldr	r3, [pc, #208]	; (800032c <main+0x158>)
 800025a:	2205      	movs	r2, #5
 800025c:	701a      	strb	r2, [r3, #0]
			 if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 800025e:	4b34      	ldr	r3, [pc, #208]	; (8000330 <main+0x15c>)
 8000260:	4a32      	ldr	r2, [pc, #200]	; (800032c <main+0x158>)
 8000262:	4934      	ldr	r1, [pc, #208]	; (8000334 <main+0x160>)
 8000264:	4834      	ldr	r0, [pc, #208]	; (8000338 <main+0x164>)
 8000266:	f000 fe2e 	bl	8000ec6 <HAL_CAN_AddTxMessage>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <main+0xa0>
				Error_Handler();															// Transmission error
 8000270:	f000 fa5a 	bl	8000728 <Error_Handler>
			 }
			 HAL_Delay(200);
 8000274:	20c8      	movs	r0, #200	; 0xc8
 8000276:	f000 fbf9 	bl	8000a6c <HAL_Delay>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);  										// Turn off LED2
 800027a:	2110      	movs	r1, #16
 800027c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000280:	f001 fd1c 	bl	8001cbc <HAL_GPIO_TogglePin>
			 BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 8000284:	4b28      	ldr	r3, [pc, #160]	; (8000328 <main+0x154>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	e7af      	b.n	80001ec <main+0x18>
		 }
		  else if (BUTTON == 2) {												// Blue button pressed --> Turn on LED2 for 2 seconds and Transmit message
 800028c:	4b26      	ldr	r3, [pc, #152]	; (8000328 <main+0x154>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b02      	cmp	r3, #2
 8000292:	d11e      	bne.n	80002d2 <main+0xfe>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);  										// Turn on LED2															// Leave it on for 2 seconds
 8000294:	2140      	movs	r1, #64	; 0x40
 8000296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029a:	f001 fd0f 	bl	8001cbc <HAL_GPIO_TogglePin>
			 TxData[0] = GO_TO_FLOOR_2;																// Store the 1 character message to transmit into the TxData buffer and transmit over the CAN bus
 800029e:	4b23      	ldr	r3, [pc, #140]	; (800032c <main+0x158>)
 80002a0:	2206      	movs	r2, #6
 80002a2:	701a      	strb	r2, [r3, #0]
			 if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 80002a4:	4b22      	ldr	r3, [pc, #136]	; (8000330 <main+0x15c>)
 80002a6:	4a21      	ldr	r2, [pc, #132]	; (800032c <main+0x158>)
 80002a8:	4922      	ldr	r1, [pc, #136]	; (8000334 <main+0x160>)
 80002aa:	4823      	ldr	r0, [pc, #140]	; (8000338 <main+0x164>)
 80002ac:	f000 fe0b 	bl	8000ec6 <HAL_CAN_AddTxMessage>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <main+0xe6>
				Error_Handler();															// Transmission error
 80002b6:	f000 fa37 	bl	8000728 <Error_Handler>
			 }
			 HAL_Delay(200);
 80002ba:	20c8      	movs	r0, #200	; 0xc8
 80002bc:	f000 fbd6 	bl	8000a6c <HAL_Delay>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);  										// Turn off LED2
 80002c0:	2140      	movs	r1, #64	; 0x40
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c6:	f001 fcf9 	bl	8001cbc <HAL_GPIO_TogglePin>
			 BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <main+0x154>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
 80002d0:	e78c      	b.n	80001ec <main+0x18>
		 }
		  else if (BUTTON == 3 || BUTTON == 5) {												// Blue button pressed --> Turn on LED2 for 2 seconds and Transmit message
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <main+0x154>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d003      	beq.n	80002e2 <main+0x10e>
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <main+0x154>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b05      	cmp	r3, #5
 80002e0:	d184      	bne.n	80001ec <main+0x18>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);  										// Turn on LED2															// Leave it on for 2 seconds
 80002e2:	2180      	movs	r1, #128	; 0x80
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f001 fce8 	bl	8001cbc <HAL_GPIO_TogglePin>
			 TxData[0] = GO_TO_FLOOR_3;																	// Store the 1 character message to transmit into the TxData buffer and transmit over the CAN bus
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <main+0x158>)
 80002ee:	2207      	movs	r2, #7
 80002f0:	701a      	strb	r2, [r3, #0]
			 if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <main+0x15c>)
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <main+0x158>)
 80002f6:	490f      	ldr	r1, [pc, #60]	; (8000334 <main+0x160>)
 80002f8:	480f      	ldr	r0, [pc, #60]	; (8000338 <main+0x164>)
 80002fa:	f000 fde4 	bl	8000ec6 <HAL_CAN_AddTxMessage>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <main+0x134>
				Error_Handler();															// Transmission error
 8000304:	f000 fa10 	bl	8000728 <Error_Handler>
			 }
			 HAL_Delay(200);
 8000308:	20c8      	movs	r0, #200	; 0xc8
 800030a:	f000 fbaf 	bl	8000a6c <HAL_Delay>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);  										// Turn off LED2
 800030e:	2180      	movs	r1, #128	; 0x80
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f001 fcd2 	bl	8001cbc <HAL_GPIO_TogglePin>
			 BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <main+0x154>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
	  if (RxData[0] != 0) {
 800031e:	e765      	b.n	80001ec <main+0x18>
 8000320:	20000114 	.word	0x20000114
 8000324:	20000121 	.word	0x20000121
 8000328:	20000120 	.word	0x20000120
 800032c:	2000010c 	.word	0x2000010c
 8000330:	2000011c 	.word	0x2000011c
 8000334:	200000d8 	.word	0x200000d8
 8000338:	20000028 	.word	0x20000028

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b0a6      	sub	sp, #152	; 0x98
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fdb7 	bl	8003ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2258      	movs	r2, #88	; 0x58
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fda9 	bl	8003ebe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036c:	2302      	movs	r3, #2
 800036e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000370:	2301      	movs	r3, #1
 8000372:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000374:	2310      	movs	r3, #16
 8000376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000388:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800038c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fcc0 	bl	8001d20 <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003a6:	f000 f9bf 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2302      	movs	r3, #2
 80003b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003c4:	2102      	movs	r1, #2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fcfe 	bl	8002dc8 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003d2:	f000 f9a9 	bl	8000728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 ff11 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003ec:	f000 f99c 	bl	8000728 <Error_Handler>
  }
}
 80003f0:	bf00      	nop
 80003f2:	3798      	adds	r7, #152	; 0x98
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003fe:	4b3a      	ldr	r3, [pc, #232]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000400:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <MX_CAN_Init+0xf4>)
 8000402:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 8000404:	4b38      	ldr	r3, [pc, #224]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000406:	2220      	movs	r2, #32
 8000408:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800040a:	4b37      	ldr	r3, [pc, #220]	; (80004e8 <MX_CAN_Init+0xf0>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000410:	4b35      	ldr	r3, [pc, #212]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000416:	4b34      	ldr	r3, [pc, #208]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000418:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800041c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800041e:	4b32      	ldr	r3, [pc, #200]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000420:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000424:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000426:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800042c:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <MX_CAN_Init+0xf0>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000434:	2200      	movs	r2, #0
 8000436:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000438:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <MX_CAN_Init+0xf0>)
 800043a:	2200      	movs	r2, #0
 800043c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800043e:	4b2a      	ldr	r3, [pc, #168]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000440:	2200      	movs	r2, #0
 8000442:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <MX_CAN_Init+0xf0>)
 8000446:	2200      	movs	r2, #0
 8000448:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800044a:	4827      	ldr	r0, [pc, #156]	; (80004e8 <MX_CAN_Init+0xf0>)
 800044c:	f000 fb32 	bl	8000ab4 <HAL_CAN_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000456:	f000 f967 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filter;  							// This is one of the 13 filters - can create more filters - this one will be number 0

	/* Configure filter 0 to direct everything to FIFO 0 */
	filter.FilterBank = 0;							// This is filter number 0
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
	filter.FilterIdHigh = 0x0100 << 5;      			// Set FilterIdHigh bits by choosing an ID and aligning the bits in the filter register with the receive register by shifting << 5  (See Second lecture in CAN series - last few slides)
 800045e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000462:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x0000;						// Not using FilterIdLow bits (set as don't care)
 8000464:	2300      	movs	r3, #0
 8000466:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0xFFE <<5;				// Same as example in lecture (this gives a range of ID's that will be accepted of between 0x100 and 0x103). Must also align the bits in the Mask register with those in the receive register.
 8000468:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <MX_CAN_Init+0xf8>)
 800046a:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x0000;					// Not using FilterMaskLow bits (set as don't care)
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
	filter.FilterMode = CAN_FILTERMODE_IDMASK; 		// uses mask mode (so can set range of IDs)
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;		// Use 32 bit filters (doesn't really matter if we use 16 or 32 bit since we are using mask)
 8000478:	2301      	movs	r3, #1
 800047a:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = ENABLE;					// By default the filters are disabled so enable them
 800047c:	2301      	movs	r3, #1
 800047e:	623b      	str	r3, [r7, #32]
	filter.SlaveStartFilterBank = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	627b      	str	r3, [r7, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {	// Set the above values for filter 0
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	4817      	ldr	r0, [pc, #92]	; (80004e8 <MX_CAN_Init+0xf0>)
 800048a:	f000 fc0e 	bl	8000caa <HAL_CAN_ConfigFilter>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_CAN_Init+0xa0>
	Error_Handler();
 8000494:	f000 f948 	bl	8000728 <Error_Handler>
	}

	/* *** Start the CAN peripheral *** */
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <MX_CAN_Init+0xf0>)
 800049a:	f000 fcd0 	bl	8000e3e <HAL_CAN_Start>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_CAN_Init+0xb0>
	  Error_Handler();
 80004a4:	f000 f940 	bl	8000728 <Error_Handler>
	}

	/* *** Activate CAN Rx notification interrupt *** */
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80004a8:	2102      	movs	r1, #2
 80004aa:	480f      	ldr	r0, [pc, #60]	; (80004e8 <MX_CAN_Init+0xf0>)
 80004ac:	f000 fefd 	bl	80012aa <HAL_CAN_ActivateNotification>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_CAN_Init+0xc2>
	  Error_Handler();
 80004b6:	f000 f937 	bl	8000728 <Error_Handler>
	}

	TxHeader.IDE = CAN_ID_STD;		 				// Using standard mode. Note this = CAN_ID_EXT for extended mode
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_CAN_Init+0xfc>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = 0x00;			 				// Extended ID is not used
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_CAN_Init+0xfc>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
	TxHeader.StdId = ID;	 		 					// Standard mode ID is 0x100 -- CHANGE THIS LATER ---
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_CAN_Init+0xfc>)
 80004c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004cc:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;	 					// Send a data frame not an RTR
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_CAN_Init+0xfc>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 1;				 					// Data length code = 1 (only send one byte)
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <MX_CAN_Init+0xfc>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_CAN_Init+0xfc>)
 80004dc:	2200      	movs	r2, #0
 80004de:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3728      	adds	r7, #40	; 0x28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000028 	.word	0x20000028
 80004ec:	40006400 	.word	0x40006400
 80004f0:	0001ffc0 	.word	0x0001ffc0
 80004f4:	200000d8 	.word	0x200000d8

080004f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_USART2_UART_Init+0x58>)
 80004fe:	4a15      	ldr	r2, [pc, #84]	; (8000554 <MX_USART2_UART_Init+0x5c>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000504:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_USART2_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_USART2_UART_Init+0x58>)
 800053c:	f003 f882 	bl	8003644 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000546:	f000 f8ef 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000050 	.word	0x20000050
 8000554:	40004400 	.word	0x40004400

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b49      	ldr	r3, [pc, #292]	; (8000694 <MX_GPIO_Init+0x13c>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <MX_GPIO_Init+0x13c>)
 8000574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b46      	ldr	r3, [pc, #280]	; (8000694 <MX_GPIO_Init+0x13c>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b43      	ldr	r3, [pc, #268]	; (8000694 <MX_GPIO_Init+0x13c>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a42      	ldr	r2, [pc, #264]	; (8000694 <MX_GPIO_Init+0x13c>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <MX_GPIO_Init+0x13c>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <MX_GPIO_Init+0x13c>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a3c      	ldr	r2, [pc, #240]	; (8000694 <MX_GPIO_Init+0x13c>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <MX_GPIO_Init+0x13c>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b37      	ldr	r3, [pc, #220]	; (8000694 <MX_GPIO_Init+0x13c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a36      	ldr	r2, [pc, #216]	; (8000694 <MX_GPIO_Init+0x13c>)
 80005bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <MX_GPIO_Init+0x13c>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PB1_LED_Pin|LD2_Pin|PB2_LED_Pin|PB3_LED_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	21f0      	movs	r1, #240	; 0xf0
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f001 fb59 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Floor_1_indicator_LED_GPIO_Port, Floor_1_indicator_LED_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2120      	movs	r1, #32
 80005de:	482e      	ldr	r0, [pc, #184]	; (8000698 <MX_GPIO_Init+0x140>)
 80005e0:	f001 fb54 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Floor_2_indicator_LED_Pin|Floor_3_indicator_LED_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2103      	movs	r1, #3
 80005e8:	482c      	ldr	r0, [pc, #176]	; (800069c <MX_GPIO_Init+0x144>)
 80005ea:	f001 fb4f 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4824      	ldr	r0, [pc, #144]	; (8000698 <MX_GPIO_Init+0x140>)
 8000606:	f001 f9b7 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_LED_Pin LD2_Pin PB2_LED_Pin PB3_LED_Pin */
  GPIO_InitStruct.Pin = PB1_LED_Pin|LD2_Pin|PB2_LED_Pin|PB3_LED_Pin;
 800060a:	23f0      	movs	r3, #240	; 0xf0
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f001 f9a8 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : Floor_1_indicator_LED_Pin */
  GPIO_InitStruct.Pin = Floor_1_indicator_LED_Pin;
 8000628:	2320      	movs	r3, #32
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Floor_1_indicator_LED_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4816      	ldr	r0, [pc, #88]	; (8000698 <MX_GPIO_Init+0x140>)
 8000640:	f001 f99a 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor_2_indicator_LED_Pin Floor_3_indicator_LED_Pin */
  GPIO_InitStruct.Pin = Floor_2_indicator_LED_Pin|Floor_3_indicator_LED_Pin;
 8000644:	2303      	movs	r3, #3
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <MX_GPIO_Init+0x144>)
 800065c:	f001 f98c 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pushbutton_1_Pin Pushbutton_3_Pin Pushbutton_2_Pin */
  GPIO_InitStruct.Pin = Pushbutton_1_Pin|Pushbutton_3_Pin|Pushbutton_2_Pin;
 8000660:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000666:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <MX_GPIO_Init+0x144>)
 8000678:	f001 f97e 	bl	8001978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2028      	movs	r0, #40	; 0x28
 8000682:	f001 f942 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000686:	2028      	movs	r0, #40	; 0x28
 8000688:	f001 f95b 	bl	8001942 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	48000800 	.word	0x48000800
 800069c:	48000400 	.word	0x48000400

080006a0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	/* Get RX message and store in RxData[] buffer */
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 fcd9 	bl	8001066 <HAL_CAN_GetRxMessage>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  {
	    /* Reception Error */
	    Error_Handler();
 80006ba:	f000 f835 	bl	8000728 <Error_Handler>
	  }
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000114 	.word	0x20000114
 80006cc:	200000f0 	.word	0x200000f0

080006d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
   //Set the BUTTON Flag to indicate which button was pressed
  if (GPIO_Pin == GPIO_PIN_12) {					// GPIO pin 13 is the blue push button{
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006e0:	d103      	bne.n	80006ea <HAL_GPIO_EXTI_Callback+0x1a>
	  BUTTON = 1;								// Blue button pressed
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_GPIO_EXTI_Callback+0x54>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
  }
  else if (GPIO_Pin == GPIO_PIN_13){
  	  BUTTON = 5;
    }

}
 80006e8:	e016      	b.n	8000718 <HAL_GPIO_EXTI_Callback+0x48>
  else if (GPIO_Pin == GPIO_PIN_14){
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006f0:	d103      	bne.n	80006fa <HAL_GPIO_EXTI_Callback+0x2a>
	  BUTTON = 3;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_GPIO_EXTI_Callback+0x54>)
 80006f4:	2203      	movs	r2, #3
 80006f6:	701a      	strb	r2, [r3, #0]
}
 80006f8:	e00e      	b.n	8000718 <HAL_GPIO_EXTI_Callback+0x48>
  else if (GPIO_Pin == GPIO_PIN_14){
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000700:	d103      	bne.n	800070a <HAL_GPIO_EXTI_Callback+0x3a>
	  BUTTON = 2;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <HAL_GPIO_EXTI_Callback+0x54>)
 8000704:	2202      	movs	r2, #2
 8000706:	701a      	strb	r2, [r3, #0]
}
 8000708:	e006      	b.n	8000718 <HAL_GPIO_EXTI_Callback+0x48>
  else if (GPIO_Pin == GPIO_PIN_13){
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000710:	d102      	bne.n	8000718 <HAL_GPIO_EXTI_Callback+0x48>
  	  BUTTON = 5;
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <HAL_GPIO_EXTI_Callback+0x54>)
 8000714:	2205      	movs	r2, #5
 8000716:	701a      	strb	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	20000120 	.word	0x20000120

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x44>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_MspInit+0x44>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_MspInit+0x44>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_MspInit+0x44>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_MspInit+0x44>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x44>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800076a:	2007      	movs	r0, #7
 800076c:	f001 f8c2 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1c      	ldr	r2, [pc, #112]	; (800080c <HAL_CAN_MspInit+0x90>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d131      	bne.n	8000802 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_CAN_MspInit+0x94>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <HAL_CAN_MspInit+0x94>)
 80007a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_CAN_MspInit+0x94>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_CAN_MspInit+0x94>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <HAL_CAN_MspInit+0x94>)
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <HAL_CAN_MspInit+0x94>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80007e0:	2309      	movs	r3, #9
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f001 f8c3 	bl	8001978 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2014      	movs	r0, #20
 80007f8:	f001 f887 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80007fc:	2014      	movs	r0, #20
 80007fe:	f001 f8a0 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40006400 	.word	0x40006400
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a17      	ldr	r2, [pc, #92]	; (8000890 <HAL_UART_MspInit+0x7c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d128      	bne.n	8000888 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_UART_MspInit+0x80>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <HAL_UART_MspInit+0x80>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_MspInit+0x80>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0x80>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_UART_MspInit+0x80>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_UART_MspInit+0x80>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000866:	230c      	movs	r3, #12
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000876:	2307      	movs	r3, #7
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f001 f878 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f8a2 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80008f2:	f000 fd00 	bl	80012f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000028 	.word	0x20000028

08000900 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pushbutton_1_Pin);
 8000904:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000908:	f001 f9f2 	bl	8001cf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800090c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000910:	f001 f9ee 	bl	8001cf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Pushbutton_3_Pin);
 8000914:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000918:	f001 f9ea 	bl	8001cf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Pushbutton_2_Pin);
 800091c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000920:	f001 f9e6 	bl	8001cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000950:	f7ff ffea 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f003 faa9 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097e:	f7ff fc29 	bl	80001d4 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000984:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	08003f70 	.word	0x08003f70
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	20000128 	.word	0x20000128

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_Init+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_Init+0x28>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 ff9f 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff feba 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 ffb7 	bl	800195e <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 ff7f 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000124 	.word	0x20000124

08000a54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000124 	.word	0x20000124

08000a6c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e0ed      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fe52 	bl	800077c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0201 	orr.w	r2, r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae8:	f7ff ffb4 	bl	8000a54 <HAL_GetTick>
 8000aec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aee:	e012      	b.n	8000b16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af0:	f7ff ffb0 	bl	8000a54 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	2b0a      	cmp	r3, #10
 8000afc:	d90b      	bls.n	8000b16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2205      	movs	r2, #5
 8000b0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e0c5      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0e5      	beq.n	8000af0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f022 0202 	bic.w	r2, r2, #2
 8000b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b34:	f7ff ff8e 	bl	8000a54 <HAL_GetTick>
 8000b38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b3a:	e012      	b.n	8000b62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b3c:	f7ff ff8a 	bl	8000a54 <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b0a      	cmp	r3, #10
 8000b48:	d90b      	bls.n	8000b62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2205      	movs	r2, #5
 8000b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e09f      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1e5      	bne.n	8000b3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7e1b      	ldrb	r3, [r3, #24]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d108      	bne.n	8000b8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	e007      	b.n	8000b9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7e5b      	ldrb	r3, [r3, #25]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d108      	bne.n	8000bb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e9b      	ldrb	r3, [r3, #26]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d108      	bne.n	8000bde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0220 	orr.w	r2, r2, #32
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0220 	bic.w	r2, r2, #32
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7edb      	ldrb	r3, [r3, #27]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0210 	bic.w	r2, r2, #16
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0210 	orr.w	r2, r2, #16
 8000c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7f1b      	ldrb	r3, [r3, #28]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0208 	orr.w	r2, r2, #8
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0208 	bic.w	r2, r2, #8
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7f5b      	ldrb	r3, [r3, #29]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f042 0204 	orr.w	r2, r2, #4
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0204 	bic.w	r2, r2, #4
 8000c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	ea42 0103 	orr.w	r1, r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b087      	sub	sp, #28
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cc2:	7cfb      	ldrb	r3, [r7, #19]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d003      	beq.n	8000cd0 <HAL_CAN_ConfigFilter+0x26>
 8000cc8:	7cfb      	ldrb	r3, [r7, #19]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	f040 80aa 	bne.w	8000e24 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cd6:	f043 0201 	orr.w	r2, r3, #1
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f003 031f 	and.w	r3, r3, #31
 8000ce8:	2201      	movs	r2, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d123      	bne.n	8000d52 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	401a      	ands	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d2c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3248      	adds	r2, #72	; 0x48
 8000d32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d48:	6979      	ldr	r1, [r7, #20]
 8000d4a:	3348      	adds	r3, #72	; 0x48
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	440b      	add	r3, r1
 8000d50:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d122      	bne.n	8000da0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3248      	adds	r2, #72	; 0x48
 8000d80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d96:	6979      	ldr	r1, [r7, #20]
 8000d98:	3348      	adds	r3, #72	; 0x48
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d109      	bne.n	8000dbc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000dba:	e007      	b.n	8000dcc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d109      	bne.n	8000de8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000de6:	e007      	b.n	8000df8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d107      	bne.n	8000e10 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e16:	f023 0201 	bic.w	r2, r3, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	e006      	b.n	8000e32 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
  }
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	371c      	adds	r7, #28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d12e      	bne.n	8000eb0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2202      	movs	r2, #2
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0201 	bic.w	r2, r2, #1
 8000e68:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e6a:	f7ff fdf3 	bl	8000a54 <HAL_GetTick>
 8000e6e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e70:	e012      	b.n	8000e98 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e72:	f7ff fdef 	bl	8000a54 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b0a      	cmp	r3, #10
 8000e7e:	d90b      	bls.n	8000e98 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2205      	movs	r2, #5
 8000e90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e012      	b.n	8000ebe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1e5      	bne.n	8000e72 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e006      	b.n	8000ebe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
  }
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b089      	sub	sp, #36	; 0x24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eda:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ee4:	7ffb      	ldrb	r3, [r7, #31]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d003      	beq.n	8000ef2 <HAL_CAN_AddTxMessage+0x2c>
 8000eea:	7ffb      	ldrb	r3, [r7, #31]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	f040 80ad 	bne.w	800104c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10a      	bne.n	8000f12 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d105      	bne.n	8000f12 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 8095 	beq.w	800103c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	0e1b      	lsrs	r3, r3, #24
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	409a      	lsls	r2, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10d      	bne.n	8000f4a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	6809      	ldr	r1, [r1, #0]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3318      	adds	r3, #24
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	440b      	add	r3, r1
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e00f      	b.n	8000f6a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f54:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f5a:	68f9      	ldr	r1, [r7, #12]
 8000f5c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f5e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3318      	adds	r3, #24
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	440b      	add	r3, r1
 8000f68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6819      	ldr	r1, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3318      	adds	r3, #24
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	440b      	add	r3, r1
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	7d1b      	ldrb	r3, [r3, #20]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d111      	bne.n	8000faa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4413      	add	r3, r2
 8000f92:	3304      	adds	r3, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	6811      	ldr	r1, [r2, #0]
 8000f9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3307      	adds	r3, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	061a      	lsls	r2, r3, #24
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3306      	adds	r3, #6
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	041b      	lsls	r3, r3, #16
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3305      	adds	r3, #5
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	3204      	adds	r2, #4
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	4610      	mov	r0, r2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	6811      	ldr	r1, [r2, #0]
 8000fd2:	ea43 0200 	orr.w	r2, r3, r0
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	440b      	add	r3, r1
 8000fdc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fe0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	061a      	lsls	r2, r3, #24
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3302      	adds	r3, #2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	041b      	lsls	r3, r3, #16
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	4610      	mov	r0, r2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	6811      	ldr	r1, [r2, #0]
 8001008:	ea43 0200 	orr.w	r2, r3, r0
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	440b      	add	r3, r1
 8001012:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001016:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3318      	adds	r3, #24
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	6811      	ldr	r1, [r2, #0]
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3318      	adds	r3, #24
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	440b      	add	r3, r1
 8001036:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	e00e      	b.n	800105a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e006      	b.n	800105a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
  }
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001066:	b480      	push	{r7}
 8001068:	b087      	sub	sp, #28
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d003      	beq.n	800108a <HAL_CAN_GetRxMessage+0x24>
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	2b02      	cmp	r3, #2
 8001086:	f040 8103 	bne.w	8001290 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10e      	bne.n	80010ae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d116      	bne.n	80010cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0f7      	b.n	800129e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d107      	bne.n	80010cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0e8      	b.n	800129e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	331b      	adds	r3, #27
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	4413      	add	r3, r2
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0204 	and.w	r2, r3, #4
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10c      	bne.n	8001104 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	331b      	adds	r3, #27
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	4413      	add	r3, r2
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0d5b      	lsrs	r3, r3, #21
 80010fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e00b      	b.n	800111c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	331b      	adds	r3, #27
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	4413      	add	r3, r2
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	331b      	adds	r3, #27
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0202 	and.w	r2, r3, #2
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	331b      	adds	r3, #27
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	3304      	adds	r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2208      	movs	r2, #8
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	e00b      	b.n	800116a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	331b      	adds	r3, #27
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	3304      	adds	r3, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 020f 	and.w	r2, r3, #15
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	331b      	adds	r3, #27
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	3304      	adds	r3, #4
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b2da      	uxtb	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	331b      	adds	r3, #27
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	3304      	adds	r3, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	4413      	add	r3, r2
 80011ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0a1a      	lsrs	r2, r3, #8
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0c1a      	lsrs	r2, r3, #16
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3302      	adds	r3, #2
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0e1a      	lsrs	r2, r3, #24
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3303      	adds	r3, #3
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3304      	adds	r3, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	4413      	add	r3, r2
 8001220:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	0a1a      	lsrs	r2, r3, #8
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3305      	adds	r3, #5
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0c1a      	lsrs	r2, r3, #16
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3306      	adds	r3, #6
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0e1a      	lsrs	r2, r3, #24
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3307      	adds	r3, #7
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d108      	bne.n	800127c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0220 	orr.w	r2, r2, #32
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	e007      	b.n	800128c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0220 	orr.w	r2, r2, #32
 800128a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	e006      	b.n	800129e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
  }
}
 800129e:	4618      	mov	r0, r3
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d002      	beq.n	80012c8 <HAL_CAN_ActivateNotification+0x1e>
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d109      	bne.n	80012dc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6959      	ldr	r1, [r3, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	e006      	b.n	80012ea <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
  }
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b08a      	sub	sp, #40	; 0x28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d07c      	beq.n	8001436 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d023      	beq.n	800138e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2201      	movs	r2, #1
 800134c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f983 	bl	8001664 <HAL_CAN_TxMailbox0CompleteCallback>
 800135e:	e016      	b.n	800138e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	e00c      	b.n	800138e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
 8001386:	e002      	b.n	800138e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f989 	bl	80016a0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d024      	beq.n	80013e2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f963 	bl	8001678 <HAL_CAN_TxMailbox1CompleteCallback>
 80013b2:	e016      	b.n	80013e2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
 80013c6:	e00c      	b.n	80013e2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	e002      	b.n	80013e2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f969 	bl	80016b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d024      	beq.n	8001436 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f943 	bl	800168c <HAL_CAN_TxMailbox2CompleteCallback>
 8001406:	e016      	b.n	8001436 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
 800141a:	e00c      	b.n	8001436 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
 800142e:	e002      	b.n	8001436 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f949 	bl	80016c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001450:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2210      	movs	r2, #16
 8001458:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00b      	beq.n	800147c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2208      	movs	r2, #8
 8001474:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f930 	bl	80016dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff f903 	bl	80006a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00c      	beq.n	80014be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2210      	movs	r2, #16
 80014bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2208      	movs	r2, #8
 80014d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f912 	bl	8001704 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f8f9 	bl	80016f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2210      	movs	r2, #16
 8001518:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f8fc 	bl	8001718 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2208      	movs	r2, #8
 800153a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f8f5 	bl	800172c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d07b      	beq.n	8001644 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d072      	beq.n	800163c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001594:	2b00      	cmp	r3, #0
 8001596:	d008      	beq.n	80015aa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d043      	beq.n	800163c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d03e      	beq.n	800163c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015c4:	2b60      	cmp	r3, #96	; 0x60
 80015c6:	d02b      	beq.n	8001620 <HAL_CAN_IRQHandler+0x32a>
 80015c8:	2b60      	cmp	r3, #96	; 0x60
 80015ca:	d82e      	bhi.n	800162a <HAL_CAN_IRQHandler+0x334>
 80015cc:	2b50      	cmp	r3, #80	; 0x50
 80015ce:	d022      	beq.n	8001616 <HAL_CAN_IRQHandler+0x320>
 80015d0:	2b50      	cmp	r3, #80	; 0x50
 80015d2:	d82a      	bhi.n	800162a <HAL_CAN_IRQHandler+0x334>
 80015d4:	2b40      	cmp	r3, #64	; 0x40
 80015d6:	d019      	beq.n	800160c <HAL_CAN_IRQHandler+0x316>
 80015d8:	2b40      	cmp	r3, #64	; 0x40
 80015da:	d826      	bhi.n	800162a <HAL_CAN_IRQHandler+0x334>
 80015dc:	2b30      	cmp	r3, #48	; 0x30
 80015de:	d010      	beq.n	8001602 <HAL_CAN_IRQHandler+0x30c>
 80015e0:	2b30      	cmp	r3, #48	; 0x30
 80015e2:	d822      	bhi.n	800162a <HAL_CAN_IRQHandler+0x334>
 80015e4:	2b10      	cmp	r3, #16
 80015e6:	d002      	beq.n	80015ee <HAL_CAN_IRQHandler+0x2f8>
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d005      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015ec:	e01d      	b.n	800162a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015f6:	e019      	b.n	800162c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	f043 0310 	orr.w	r3, r3, #16
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001600:	e014      	b.n	800162c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800160a:	e00f      	b.n	800162c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001614:	e00a      	b.n	800162c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800161e:	e005      	b.n	800162c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001628:	e000      	b.n	800162c <HAL_CAN_IRQHandler+0x336>
            break;
 800162a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699a      	ldr	r2, [r3, #24]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800163a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2204      	movs	r2, #4
 8001642:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f872 	bl	8001740 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d4:	f7ff ff8e 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff29 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff3e 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff8e 	bl	8001848 <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5d 	bl	80017f4 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff31 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e160      	b.n	8001c4a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8152 	beq.w	8001c44 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d005      	beq.n	80019b8 <HAL_GPIO_Init+0x40>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d130      	bne.n	8001a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ee:	2201      	movs	r2, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f003 0201 	and.w	r2, r3, #1
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d017      	beq.n	8001a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d123      	bne.n	8001aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	6939      	ldr	r1, [r7, #16]
 8001aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0203 	and.w	r2, r3, #3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80ac 	beq.w	8001c44 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aec:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b04:	4a59      	ldr	r2, [pc, #356]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b2e:	d025      	beq.n	8001b7c <HAL_GPIO_Init+0x204>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <HAL_GPIO_Init+0x2f8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d01f      	beq.n	8001b78 <HAL_GPIO_Init+0x200>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_GPIO_Init+0x2fc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d019      	beq.n	8001b74 <HAL_GPIO_Init+0x1fc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a4d      	ldr	r2, [pc, #308]	; (8001c78 <HAL_GPIO_Init+0x300>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d013      	beq.n	8001b70 <HAL_GPIO_Init+0x1f8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a4c      	ldr	r2, [pc, #304]	; (8001c7c <HAL_GPIO_Init+0x304>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00d      	beq.n	8001b6c <HAL_GPIO_Init+0x1f4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a4b      	ldr	r2, [pc, #300]	; (8001c80 <HAL_GPIO_Init+0x308>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x1f0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a4a      	ldr	r2, [pc, #296]	; (8001c84 <HAL_GPIO_Init+0x30c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_GPIO_Init+0x1ec>
 8001b60:	2306      	movs	r3, #6
 8001b62:	e00c      	b.n	8001b7e <HAL_GPIO_Init+0x206>
 8001b64:	2307      	movs	r3, #7
 8001b66:	e00a      	b.n	8001b7e <HAL_GPIO_Init+0x206>
 8001b68:	2305      	movs	r3, #5
 8001b6a:	e008      	b.n	8001b7e <HAL_GPIO_Init+0x206>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e006      	b.n	8001b7e <HAL_GPIO_Init+0x206>
 8001b70:	2303      	movs	r3, #3
 8001b72:	e004      	b.n	8001b7e <HAL_GPIO_Init+0x206>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x206>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_GPIO_Init+0x206>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	f002 0203 	and.w	r2, r2, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4093      	lsls	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b8e:	4937      	ldr	r1, [pc, #220]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bc0:	4a31      	ldr	r2, [pc, #196]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bea:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c14:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <HAL_GPIO_Init+0x310>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f ae97 	bne.w	8001988 <HAL_GPIO_Init+0x10>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	48000400 	.word	0x48000400
 8001c74:	48000800 	.word	0x48000800
 8001c78:	48000c00 	.word	0x48000c00
 8001c7c:	48001000 	.word	0x48001000
 8001c80:	48001400 	.word	0x48001400
 8001c84:	48001800 	.word	0x48001800
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43d9      	mvns	r1, r3
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	400b      	ands	r3, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fcde 	bl	80006d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f001 b83a 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 816f 	beq.w	800203a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d5c:	4bb5      	ldr	r3, [pc, #724]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d00c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d68:	4bb2      	ldr	r3, [pc, #712]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d15c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x10e>
 8001d74:	4baf      	ldr	r3, [pc, #700]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d155      	bne.n	8001e2e <HAL_RCC_OscConfig+0x10e>
 8001d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d86:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_RCC_OscConfig+0x94>
 8001dae:	4ba1      	ldr	r3, [pc, #644]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	e015      	b.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dd0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ddc:	4b95      	ldr	r3, [pc, #596]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001de4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001de8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001dec:	fa92 f2a2 	rbit	r2, r2
 8001df0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001df4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f042 0220 	orr.w	r2, r2, #32
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	f002 021f 	and.w	r2, r2, #31
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8111 	beq.w	8002038 <HAL_RCC_OscConfig+0x318>
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8108 	bne.w	8002038 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f000 bfc6 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12e>
 8001e40:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a7b      	ldr	r2, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e036      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x158>
 8001e5e:	4b75      	ldr	r3, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a74      	ldr	r2, [pc, #464]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b72      	ldr	r3, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a71      	ldr	r2, [pc, #452]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e021      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x184>
 8001e8a:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a66      	ldr	r2, [pc, #408]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x19c>
 8001ea4:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a62      	ldr	r2, [pc, #392]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b60      	ldr	r3, [pc, #384]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5f      	ldr	r2, [pc, #380]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d059      	beq.n	8001f80 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fdc2 	bl	8000a54 <HAL_GetTick>
 8001ed0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed6:	f7fe fdbd 	bl	8000a54 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d902      	bls.n	8001eec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f000 bf67 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>
 8001eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001f00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_OscConfig+0x1fe>
 8001f18:	4b46      	ldr	r3, [pc, #280]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x22a>
 8001f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f22:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f36:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f3a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f46:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f4e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f52:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001f5e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f62:	fab2 f282 	clz	r2, r2
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f002 021f 	and.w	r2, r2, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ab      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1b6>
 8001f7e:	e05c      	b.n	800203a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fd68 	bl	8000a54 <HAL_GetTick>
 8001f84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fd63 	bl	8000a54 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d902      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f000 bf0d 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001fb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2b2>
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x2de>
 8001fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCC_OscConfig+0x314>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002006:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002012:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f002 021f 	and.w	r2, r2, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ab      	bne.n	8001f8a <HAL_RCC_OscConfig+0x26a>
 8002032:	e002      	b.n	800203a <HAL_RCC_OscConfig+0x31a>
 8002034:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 817f 	beq.w	800234e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002050:	4ba7      	ldr	r3, [pc, #668]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00c      	beq.n	8002076 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800205c:	4ba4      	ldr	r3, [pc, #656]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d173      	bne.n	8002150 <HAL_RCC_OscConfig+0x430>
 8002068:	4ba1      	ldr	r3, [pc, #644]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002074:	d16c      	bne.n	8002150 <HAL_RCC_OscConfig+0x430>
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002088:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <HAL_RCC_OscConfig+0x386>
 80020a0:	4b93      	ldr	r3, [pc, #588]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	e013      	b.n	80020ce <HAL_RCC_OscConfig+0x3ae>
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80020b8:	2302      	movs	r3, #2
 80020ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020be:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020ca:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	2202      	movs	r2, #2
 80020d0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80020d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80020d8:	fa92 f2a2 	rbit	r2, r2
 80020dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80020e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f042 0220 	orr.w	r2, r2, #32
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	f002 021f 	and.w	r2, r2, #31
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f202 	lsl.w	r2, r1, r2
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCC_OscConfig+0x3f6>
 8002100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002104:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d002      	beq.n	8002116 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	f000 be52 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002122:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	21f8      	movs	r1, #248	; 0xf8
 800212c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002134:	fa91 f1a1 	rbit	r1, r1
 8002138:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800213c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002140:	fab1 f181 	clz	r1, r1
 8002144:	b2c9      	uxtb	r1, r1
 8002146:	408b      	lsls	r3, r1
 8002148:	4969      	ldr	r1, [pc, #420]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e0fe      	b.n	800234e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8088 	beq.w	8002272 <HAL_RCC_OscConfig+0x552>
 8002162:	2301      	movs	r3, #1
 8002164:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002174:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002182:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	461a      	mov	r2, r3
 800218a:	2301      	movs	r3, #1
 800218c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe fc61 	bl	8000a54 <HAL_GetTick>
 8002192:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002198:	f7fe fc5c 	bl	8000a54 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d902      	bls.n	80021ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	f000 be06 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80021c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d102      	bne.n	80021de <HAL_RCC_OscConfig+0x4be>
 80021d8:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	e013      	b.n	8002206 <HAL_RCC_OscConfig+0x4e6>
 80021de:	2302      	movs	r3, #2
 80021e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2202      	movs	r2, #2
 8002208:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800220c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002218:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	f042 0220 	orr.w	r2, r2, #32
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f002 021f 	and.w	r2, r2, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0af      	beq.n	8002198 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002244:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	21f8      	movs	r1, #248	; 0xf8
 800224e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002256:	fa91 f1a1 	rbit	r1, r1
 800225a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800225e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002262:	fab1 f181 	clz	r1, r1
 8002266:	b2c9      	uxtb	r1, r1
 8002268:	408b      	lsls	r3, r1
 800226a:	4921      	ldr	r1, [pc, #132]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
 8002270:	e06d      	b.n	800234e <HAL_RCC_OscConfig+0x62e>
 8002272:	2301      	movs	r3, #1
 8002274:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002284:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002292:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	461a      	mov	r2, r3
 800229a:	2300      	movs	r3, #0
 800229c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7fe fbd9 	bl	8000a54 <HAL_GetTick>
 80022a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe fbd4 	bl	8000a54 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d902      	bls.n	80022be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	f000 bd7e 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80022d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5d4>
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <HAL_RCC_OscConfig+0x5d0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	e016      	b.n	800231c <HAL_RCC_OscConfig+0x5fc>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800230c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002318:	4bbf      	ldr	r3, [pc, #764]	; (8002618 <HAL_RCC_OscConfig+0x8f8>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2202      	movs	r2, #2
 800231e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002322:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800232e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f042 0220 	orr.w	r2, r2, #32
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f002 021f 	and.w	r2, r2, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ac      	bne.n	80022a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8113 	beq.w	800258a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002368:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d07c      	beq.n	800246e <HAL_RCC_OscConfig+0x74e>
 8002374:	2301      	movs	r3, #1
 8002376:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002386:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	4ba2      	ldr	r3, [pc, #648]	; (800261c <HAL_RCC_OscConfig+0x8fc>)
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	461a      	mov	r2, r3
 800239a:	2301      	movs	r3, #1
 800239c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7fe fb59 	bl	8000a54 <HAL_GetTick>
 80023a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e00a      	b.n	80023be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fb54 	bl	8000a54 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d902      	bls.n	80023be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	f000 bcfe 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023de:	2202      	movs	r2, #2
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002402:	2202      	movs	r2, #2
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002418:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800241c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_RCC_OscConfig+0x8f8>)
 8002420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002426:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800242a:	2102      	movs	r1, #2
 800242c:	6019      	str	r1, [r3, #0]
 800242e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002432:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f1a3 	rbit	r1, r3
 800243c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002440:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002444:	6019      	str	r1, [r3, #0]
  return result;
 8002446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d09d      	beq.n	80023a8 <HAL_RCC_OscConfig+0x688>
 800246c:	e08d      	b.n	800258a <HAL_RCC_OscConfig+0x86a>
 800246e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002472:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002490:	601a      	str	r2, [r3, #0]
  return result;
 8002492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002496:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800249a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_RCC_OscConfig+0x8fc>)
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	461a      	mov	r2, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b0:	f7fe fad0 	bl	8000a54 <HAL_GetTick>
 80024b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ba:	f7fe facb 	bl	8000a54 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d902      	bls.n	80024d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	f000 bc75 	b.w	8002dba <HAL_RCC_OscConfig+0x109a>
 80024d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024fc:	2202      	movs	r2, #2
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002520:	2202      	movs	r2, #2
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002528:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f2a3 	rbit	r2, r3
 8002532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002536:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800253a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x8f8>)
 800253e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002544:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002548:	2102      	movs	r1, #2
 800254a:	6019      	str	r1, [r3, #0]
 800254c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002550:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f1a3 	rbit	r1, r3
 800255a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002562:	6019      	str	r1, [r3, #0]
  return result;
 8002564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002568:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d197      	bne.n	80024ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 81a5 	beq.w	80028ea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_RCC_OscConfig+0x8f8>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d116      	bne.n	80025e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_OscConfig+0x8f8>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_RCC_OscConfig+0x8f8>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_RCC_OscConfig+0x8f8>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_RCC_OscConfig+0x900>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d121      	bne.n	8002630 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x900>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x900>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f8:	f7fe fa2c 	bl	8000a54 <HAL_GetTick>
 80025fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	e010      	b.n	8002624 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002602:	f7fe fa27 	bl	8000a54 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d908      	bls.n	8002624 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e3d1      	b.n	8002dba <HAL_RCC_OscConfig+0x109a>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	10908120 	.word	0x10908120
 8002620:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b8d      	ldr	r3, [pc, #564]	; (800285c <HAL_RCC_OscConfig+0xb3c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0e8      	beq.n	8002602 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002634:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x92e>
 8002640:	4b87      	ldr	r3, [pc, #540]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a86      	ldr	r2, [pc, #536]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e035      	b.n	80026ba <HAL_RCC_OscConfig+0x99a>
 800264e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002652:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x958>
 800265e:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a7f      	ldr	r2, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b7d      	ldr	r3, [pc, #500]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a7c      	ldr	r2, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	e020      	b.n	80026ba <HAL_RCC_OscConfig+0x99a>
 8002678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x982>
 8002688:	4b75      	ldr	r3, [pc, #468]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a74      	ldr	r2, [pc, #464]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	4b72      	ldr	r3, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	e00b      	b.n	80026ba <HAL_RCC_OscConfig+0x99a>
 80026a2:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6213      	str	r3, [r2, #32]
 80026ae:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4a6b      	ldr	r2, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8081 	beq.w	80027ce <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7fe f9c2 	bl	8000a54 <HAL_GetTick>
 80026d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	e00b      	b.n	80026ee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe f9bd 	bl	8000a54 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e365      	b.n	8002dba <HAL_RCC_OscConfig+0x109a>
 80026ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026f6:	2202      	movs	r2, #2
 80026f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800271a:	2202      	movs	r2, #2
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002722:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002730:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002734:	601a      	str	r2, [r3, #0]
  return result;
 8002736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800273e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d102      	bne.n	800275a <HAL_RCC_OscConfig+0xa3a>
 8002754:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	e013      	b.n	8002782 <HAL_RCC_OscConfig+0xa62>
 800275a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002762:	2202      	movs	r2, #2
 8002764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002778:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	4b38      	ldr	r3, [pc, #224]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002786:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800278a:	2102      	movs	r1, #2
 800278c:	6011      	str	r1, [r2, #0]
 800278e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002792:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	fa92 f1a2 	rbit	r1, r2
 800279c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027a0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80027a4:	6011      	str	r1, [r2, #0]
  return result;
 80027a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027aa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f002 021f 	and.w	r2, r2, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d084      	beq.n	80026d6 <HAL_RCC_OscConfig+0x9b6>
 80027cc:	e083      	b.n	80028d6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ce:	f7fe f941 	bl	8000a54 <HAL_GetTick>
 80027d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7fe f93c 	bl	8000a54 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e2e4      	b.n	8002dba <HAL_RCC_OscConfig+0x109a>
 80027f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027f8:	2202      	movs	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002800:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002818:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800281c:	2202      	movs	r2, #2
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002824:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	fa93 f2a3 	rbit	r2, r3
 800282e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002832:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002836:	601a      	str	r2, [r3, #0]
  return result;
 8002838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800283c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002840:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0xb44>
 8002856:	4b02      	ldr	r3, [pc, #8]	; (8002860 <HAL_RCC_OscConfig+0xb40>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	e017      	b.n	800288c <HAL_RCC_OscConfig+0xb6c>
 800285c:	40007000 	.word	0x40007000
 8002860:	40021000 	.word	0x40021000
 8002864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002868:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800286c:	2202      	movs	r2, #2
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002874:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002882:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	4bb3      	ldr	r3, [pc, #716]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002890:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002894:	2102      	movs	r1, #2
 8002896:	6011      	str	r1, [r2, #0]
 8002898:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800289c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	fa92 f1a2 	rbit	r1, r2
 80028a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028aa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80028ae:	6011      	str	r1, [r2, #0]
  return result;
 80028b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028b4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	fab2 f282 	clz	r2, r2
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	f002 021f 	and.w	r2, r2, #31
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f202 	lsl.w	r2, r1, r2
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d180      	bne.n	80027d8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028d6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a9d      	ldr	r2, [pc, #628]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 825e 	beq.w	8002db8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028fc:	4b96      	ldr	r3, [pc, #600]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	f000 821f 	beq.w	8002d48 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800290e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 8170 	bne.w	8002bfc <HAL_RCC_OscConfig+0xedc>
 800291c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002920:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002924:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800292e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800293c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002940:	601a      	str	r2, [r3, #0]
  return result;
 8002942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002946:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800294a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002956:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	461a      	mov	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe f877 	bl	8000a54 <HAL_GetTick>
 8002966:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	e009      	b.n	8002980 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe f872 	bl	8000a54 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e21c      	b.n	8002dba <HAL_RCC_OscConfig+0x109a>
 8002980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002984:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002992:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fa93 f2a3 	rbit	r2, r3
 800299c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029a4:	601a      	str	r2, [r3, #0]
  return result;
 80029a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029aa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d102      	bne.n	80029ca <HAL_RCC_OscConfig+0xcaa>
 80029c4:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	e027      	b.n	8002a1a <HAL_RCC_OscConfig+0xcfa>
 80029ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029dc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f2a3 	rbit	r2, r3
 8002a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a10:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a26:	6011      	str	r1, [r2, #0]
 8002a28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a2c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	fa92 f1a2 	rbit	r1, r2
 8002a36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a3a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002a3e:	6011      	str	r1, [r2, #0]
  return result;
 8002a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a44:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f042 0220 	orr.w	r2, r2, #32
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f002 021f 	and.w	r2, r2, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d182      	bne.n	800296c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a66:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f023 020f 	bic.w	r2, r3, #15
 8002a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	4937      	ldr	r1, [pc, #220]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a19      	ldr	r1, [r3, #32]
 8002a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	492d      	ldr	r1, [pc, #180]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
 8002aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ab0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	fa93 f2a3 	rbit	r2, r3
 8002ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002acc:	601a      	str	r2, [r3, #0]
  return result;
 8002ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ad6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2301      	movs	r3, #1
 8002aec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fd ffb1 	bl	8000a54 <HAL_GetTick>
 8002af2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af6:	e009      	b.n	8002b0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fd ffac 	bl	8000a54 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e156      	b.n	8002dba <HAL_RCC_OscConfig+0x109a>
 8002b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fa93 f2a3 	rbit	r2, r3
 8002b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b30:	601a      	str	r2, [r3, #0]
  return result;
 8002b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b36:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCC_OscConfig+0xe3c>
 8002b50:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <HAL_RCC_OscConfig+0xe38>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	e02a      	b.n	8002bac <HAL_RCC_OscConfig+0xe8c>
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f2a3 	rbit	r2, r3
 8002b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b94:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	fa93 f2a3 	rbit	r2, r3
 8002b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b86      	ldr	r3, [pc, #536]	; (8002dc4 <HAL_RCC_OscConfig+0x10a4>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bb0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bb8:	6011      	str	r1, [r2, #0]
 8002bba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bbe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	fa92 f1a2 	rbit	r1, r2
 8002bc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bcc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002bd0:	6011      	str	r1, [r2, #0]
  return result;
 8002bd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bd6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	fab2 f282 	clz	r2, r2
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f042 0220 	orr.w	r2, r2, #32
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f002 021f 	and.w	r2, r2, #31
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f43f af7f 	beq.w	8002af8 <HAL_RCC_OscConfig+0xdd8>
 8002bfa:	e0dd      	b.n	8002db8 <HAL_RCC_OscConfig+0x1098>
 8002bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	fa93 f2a3 	rbit	r2, r3
 8002c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c20:	601a      	str	r2, [r3, #0]
  return result;
 8002c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2300      	movs	r3, #0
 8002c40:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fd ff07 	bl	8000a54 <HAL_GetTick>
 8002c46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4a:	e009      	b.n	8002c60 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fd ff02 	bl	8000a54 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0ac      	b.n	8002dba <HAL_RCC_OscConfig+0x109a>
 8002c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c72:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c84:	601a      	str	r2, [r3, #0]
  return result;
 8002c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d102      	bne.n	8002caa <HAL_RCC_OscConfig+0xf8a>
 8002ca4:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_OscConfig+0x10a4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	e027      	b.n	8002cfa <HAL_RCC_OscConfig+0xfda>
 8002caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <HAL_RCC_OscConfig+0x10a4>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cfe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d06:	6011      	str	r1, [r2, #0]
 8002d08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	fa92 f1a2 	rbit	r1, r2
 8002d16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d1a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002d1e:	6011      	str	r1, [r2, #0]
  return result;
 8002d20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d24:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d182      	bne.n	8002c4c <HAL_RCC_OscConfig+0xf2c>
 8002d46:	e037      	b.n	8002db8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e02e      	b.n	8002dba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_OscConfig+0x10a4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_RCC_OscConfig+0x10a4>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d70:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d117      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d88:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da0:	f003 020f 	and.w	r2, r3, #15
 8002da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b09e      	sub	sp, #120	; 0x78
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e162      	b.n	80030a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b90      	ldr	r3, [pc, #576]	; (8003024 <HAL_RCC_ClockConfig+0x25c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d910      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b8d      	ldr	r3, [pc, #564]	; (8003024 <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	498b      	ldr	r1, [pc, #556]	; (8003024 <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b89      	ldr	r3, [pc, #548]	; (8003024 <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e14a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1c:	4b82      	ldr	r3, [pc, #520]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	497f      	ldr	r1, [pc, #508]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80dc 	beq.w	8002ff4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d13c      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xf6>
 8002e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xa6>
 8002e68:	4b6f      	ldr	r3, [pc, #444]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	e00f      	b.n	8002e8e <HAL_RCC_ClockConfig+0xc6>
 8002e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e80:	663b      	str	r3, [r7, #96]	; 0x60
 8002e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e8a:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e92:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e96:	fa92 f2a2 	rbit	r2, r2
 8002e9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e9e:	fab2 f282 	clz	r2, r2
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f042 0220 	orr.w	r2, r2, #32
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f002 021f 	and.w	r2, r2, #31
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d17b      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0f3      	b.n	80030a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d13c      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x178>
 8002ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d102      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x128>
 8002eea:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	e00f      	b.n	8002f10 <HAL_RCC_ClockConfig+0x148>
 8002ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
 8002efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f02:	643b      	str	r3, [r7, #64]	; 0x40
 8002f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f14:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f18:	fa92 f2a2 	rbit	r2, r2
 8002f1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f20:	fab2 f282 	clz	r2, r2
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f042 0220 	orr.w	r2, r2, #32
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f002 021f 	and.w	r2, r2, #31
 8002f30:	2101      	movs	r1, #1
 8002f32:	fa01 f202 	lsl.w	r2, r1, r2
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d13a      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b2      	b.n	80030a6 <HAL_RCC_ClockConfig+0x2de>
 8002f40:	2302      	movs	r3, #2
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	e00d      	b.n	8002f84 <HAL_RCC_ClockConfig+0x1bc>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	2302      	movs	r3, #2
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	4b29      	ldr	r3, [pc, #164]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2202      	movs	r2, #2
 8002f86:	61ba      	str	r2, [r7, #24]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	fa92 f2a2 	rbit	r2, r2
 8002f8e:	617a      	str	r2, [r7, #20]
  return result;
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	fab2 f282 	clz	r2, r2
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	f042 0220 	orr.w	r2, r2, #32
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	f002 021f 	and.w	r2, r2, #31
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e079      	b.n	80030a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	491a      	ldr	r1, [pc, #104]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc4:	f7fd fd46 	bl	8000a54 <HAL_GetTick>
 8002fc8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7fd fd42 	bl	8000a54 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e061      	b.n	80030a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 020c 	and.w	r2, r3, #12
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1eb      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x25c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d214      	bcs.n	800302c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_RCC_ClockConfig+0x25c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 0207 	bic.w	r2, r3, #7
 800300a:	4906      	ldr	r1, [pc, #24]	; (8003024 <HAL_RCC_ClockConfig+0x25c>)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b04      	ldr	r3, [pc, #16]	; (8003024 <HAL_RCC_ClockConfig+0x25c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e040      	b.n	80030a6 <HAL_RCC_ClockConfig+0x2de>
 8003024:	40022000 	.word	0x40022000
 8003028:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCC_ClockConfig+0x2e8>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	491a      	ldr	r1, [pc, #104]	; (80030b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4912      	ldr	r1, [pc, #72]	; (80030b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800306a:	f000 f829 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800306e:	4601      	mov	r1, r0
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003078:	22f0      	movs	r2, #240	; 0xf0
 800307a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	fa92 f2a2 	rbit	r2, r2
 8003082:	60fa      	str	r2, [r7, #12]
  return result;
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	fab2 f282 	clz	r2, r2
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	40d3      	lsrs	r3, r2
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003090:	5cd3      	ldrb	r3, [r2, r3]
 8003092:	fa21 f303 	lsr.w	r3, r1, r3
 8003096:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_RCC_ClockConfig+0x2f4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fc94 	bl	80009cc <HAL_InitTick>
  
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3778      	adds	r7, #120	; 0x78
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08003f30 	.word	0x08003f30
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030da:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <HAL_RCC_GetSysClockFreq+0x98>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d002      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x30>
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d003      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0x36>
 80030ee:	e029      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030f2:	613b      	str	r3, [r7, #16]
      break;
 80030f4:	e029      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	0c9b      	lsrs	r3, r3, #18
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
 8003102:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_RCC_GetSysClockFreq+0x98>)
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_RCC_GetSysClockFreq+0xa4>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800311c:	4a0f      	ldr	r2, [pc, #60]	; (800315c <HAL_RCC_GetSysClockFreq+0x9c>)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	e007      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800312e:	4a0b      	ldr	r2, [pc, #44]	; (800315c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	fbb2 f2f3 	udiv	r2, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	613b      	str	r3, [r7, #16]
      break;
 8003142:	e002      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003146:	613b      	str	r3, [r7, #16]
      break;
 8003148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314a:	693b      	ldr	r3, [r7, #16]
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40021000 	.word	0x40021000
 800315c:	007a1200 	.word	0x007a1200
 8003160:	08003f48 	.word	0x08003f48
 8003164:	08003f58 	.word	0x08003f58

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003186:	f7ff ffef 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 800318a:	4601      	mov	r1, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003194:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003198:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	603a      	str	r2, [r7, #0]
  return result;
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	40d3      	lsrs	r3, r2
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08003f40 	.word	0x08003f40

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031ca:	f7ff ffcd 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031ce:	4601      	mov	r1, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	fa92 f2a2 	rbit	r2, r2
 80031e4:	603a      	str	r2, [r7, #0]
  return result;
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	fab2 f282 	clz	r2, r2
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	40d3      	lsrs	r3, r2
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031f2:	5cd3      	ldrb	r3, [r2, r3]
 80031f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	08003f40 	.word	0x08003f40

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b092      	sub	sp, #72	; 0x48
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80d4 	beq.w	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322c:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10e      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	4a4a      	ldr	r2, [pc, #296]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	61d3      	str	r3, [r2, #28]
 8003244:	4b48      	ldr	r3, [pc, #288]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b45      	ldr	r3, [pc, #276]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	4b42      	ldr	r3, [pc, #264]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a41      	ldr	r2, [pc, #260]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fd fbf1 	bl	8000a54 <HAL_GetTick>
 8003272:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fd fbed 	bl	8000a54 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	; 0x64
 8003282:	d901      	bls.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1d6      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003294:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8084 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d07c      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	461a      	mov	r2, r3
 80032de:	2301      	movs	r3, #1
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	461a      	mov	r2, r3
 8003302:	2300      	movs	r3, #0
 8003304:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04b      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fd fb9d 	bl	8000a54 <HAL_GetTick>
 800331a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fd fb99 	bl	8000a54 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e180      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003334:	2302      	movs	r3, #2
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
 8003340:	2302      	movs	r3, #2
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	61fb      	str	r3, [r7, #28]
  return result;
 800334c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d108      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003362:	4b01      	ldr	r3, [pc, #4]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	e00d      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	10908100 	.word	0x10908100
 8003374:	2302      	movs	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	4b9a      	ldr	r3, [pc, #616]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	2202      	movs	r2, #2
 8003386:	613a      	str	r2, [r7, #16]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	fa92 f2a2 	rbit	r2, r2
 800338e:	60fa      	str	r2, [r7, #12]
  return result;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	fab2 f282 	clz	r2, r2
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f002 021f 	and.w	r2, r2, #31
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0b7      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033ae:	4b8f      	ldr	r3, [pc, #572]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	498c      	ldr	r1, [pc, #560]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	4a87      	ldr	r2, [pc, #540]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e0:	4b82      	ldr	r3, [pc, #520]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f023 0203 	bic.w	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	497f      	ldr	r1, [pc, #508]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fe:	4b7b      	ldr	r3, [pc, #492]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4978      	ldr	r1, [pc, #480]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800341c:	4b73      	ldr	r3, [pc, #460]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	4970      	ldr	r1, [pc, #448]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800343a:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4969      	ldr	r1, [pc, #420]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	4961      	ldr	r1, [pc, #388]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003476:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f023 0220 	bic.w	r2, r3, #32
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	495a      	ldr	r1, [pc, #360]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003494:	4b55      	ldr	r3, [pc, #340]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	4952      	ldr	r1, [pc, #328]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b2:	4b4e      	ldr	r3, [pc, #312]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	494b      	ldr	r1, [pc, #300]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034d0:	4b46      	ldr	r3, [pc, #280]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	4943      	ldr	r1, [pc, #268]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034ee:	4b3f      	ldr	r3, [pc, #252]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	493c      	ldr	r1, [pc, #240]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800350c:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	4934      	ldr	r1, [pc, #208]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800352a:	4b30      	ldr	r3, [pc, #192]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	492d      	ldr	r1, [pc, #180]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003554:	4925      	ldr	r1, [pc, #148]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	491e      	ldr	r1, [pc, #120]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	4916      	ldr	r1, [pc, #88]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	490f      	ldr	r1, [pc, #60]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	4907      	ldr	r1, [pc, #28]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80035de:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	e002      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	4913      	ldr	r1, [pc, #76]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	490b      	ldr	r1, [pc, #44]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003612:	4313      	orrs	r3, r2
 8003614:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362e:	4904      	ldr	r1, [pc, #16]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003630:	4313      	orrs	r3, r2
 8003632:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3748      	adds	r7, #72	; 0x48
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e040      	b.n	80036d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd f8d4 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f9fc 	bl	8003a88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f825 	bl	80036e0 <UART_SetConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e01b      	b.n	80036d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fa7b 	bl	8003bcc <UART_CheckIdleState>
 80036d6:	4603      	mov	r3, r0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b92      	ldr	r3, [pc, #584]	; (8003954 <UART_SetConfig+0x274>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	430b      	orrs	r3, r1
 8003716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a80      	ldr	r2, [pc, #512]	; (8003958 <UART_SetConfig+0x278>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d120      	bne.n	800379e <UART_SetConfig+0xbe>
 800375c:	4b7f      	ldr	r3, [pc, #508]	; (800395c <UART_SetConfig+0x27c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b03      	cmp	r3, #3
 8003766:	d817      	bhi.n	8003798 <UART_SetConfig+0xb8>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0x90>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	0800378d 	.word	0x0800378d
 8003778:	08003793 	.word	0x08003793
 800377c:	08003787 	.word	0x08003787
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e0b5      	b.n	80038f2 <UART_SetConfig+0x212>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e0b2      	b.n	80038f2 <UART_SetConfig+0x212>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e0af      	b.n	80038f2 <UART_SetConfig+0x212>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e0ac      	b.n	80038f2 <UART_SetConfig+0x212>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e0a9      	b.n	80038f2 <UART_SetConfig+0x212>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6f      	ldr	r2, [pc, #444]	; (8003960 <UART_SetConfig+0x280>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d124      	bne.n	80037f2 <UART_SetConfig+0x112>
 80037a8:	4b6c      	ldr	r3, [pc, #432]	; (800395c <UART_SetConfig+0x27c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037b4:	d011      	beq.n	80037da <UART_SetConfig+0xfa>
 80037b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037ba:	d817      	bhi.n	80037ec <UART_SetConfig+0x10c>
 80037bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c0:	d011      	beq.n	80037e6 <UART_SetConfig+0x106>
 80037c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c6:	d811      	bhi.n	80037ec <UART_SetConfig+0x10c>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <UART_SetConfig+0xf4>
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d006      	beq.n	80037e0 <UART_SetConfig+0x100>
 80037d2:	e00b      	b.n	80037ec <UART_SetConfig+0x10c>
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e08b      	b.n	80038f2 <UART_SetConfig+0x212>
 80037da:	2302      	movs	r3, #2
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e088      	b.n	80038f2 <UART_SetConfig+0x212>
 80037e0:	2304      	movs	r3, #4
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e085      	b.n	80038f2 <UART_SetConfig+0x212>
 80037e6:	2308      	movs	r3, #8
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e082      	b.n	80038f2 <UART_SetConfig+0x212>
 80037ec:	2310      	movs	r3, #16
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e07f      	b.n	80038f2 <UART_SetConfig+0x212>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5b      	ldr	r2, [pc, #364]	; (8003964 <UART_SetConfig+0x284>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d124      	bne.n	8003846 <UART_SetConfig+0x166>
 80037fc:	4b57      	ldr	r3, [pc, #348]	; (800395c <UART_SetConfig+0x27c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003804:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003808:	d011      	beq.n	800382e <UART_SetConfig+0x14e>
 800380a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800380e:	d817      	bhi.n	8003840 <UART_SetConfig+0x160>
 8003810:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003814:	d011      	beq.n	800383a <UART_SetConfig+0x15a>
 8003816:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800381a:	d811      	bhi.n	8003840 <UART_SetConfig+0x160>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <UART_SetConfig+0x148>
 8003820:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003824:	d006      	beq.n	8003834 <UART_SetConfig+0x154>
 8003826:	e00b      	b.n	8003840 <UART_SetConfig+0x160>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e061      	b.n	80038f2 <UART_SetConfig+0x212>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e05e      	b.n	80038f2 <UART_SetConfig+0x212>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e05b      	b.n	80038f2 <UART_SetConfig+0x212>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e058      	b.n	80038f2 <UART_SetConfig+0x212>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e055      	b.n	80038f2 <UART_SetConfig+0x212>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a47      	ldr	r2, [pc, #284]	; (8003968 <UART_SetConfig+0x288>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d124      	bne.n	800389a <UART_SetConfig+0x1ba>
 8003850:	4b42      	ldr	r3, [pc, #264]	; (800395c <UART_SetConfig+0x27c>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385c:	d011      	beq.n	8003882 <UART_SetConfig+0x1a2>
 800385e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003862:	d817      	bhi.n	8003894 <UART_SetConfig+0x1b4>
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003868:	d011      	beq.n	800388e <UART_SetConfig+0x1ae>
 800386a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800386e:	d811      	bhi.n	8003894 <UART_SetConfig+0x1b4>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <UART_SetConfig+0x19c>
 8003874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003878:	d006      	beq.n	8003888 <UART_SetConfig+0x1a8>
 800387a:	e00b      	b.n	8003894 <UART_SetConfig+0x1b4>
 800387c:	2300      	movs	r3, #0
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e037      	b.n	80038f2 <UART_SetConfig+0x212>
 8003882:	2302      	movs	r3, #2
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e034      	b.n	80038f2 <UART_SetConfig+0x212>
 8003888:	2304      	movs	r3, #4
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e031      	b.n	80038f2 <UART_SetConfig+0x212>
 800388e:	2308      	movs	r3, #8
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e02e      	b.n	80038f2 <UART_SetConfig+0x212>
 8003894:	2310      	movs	r3, #16
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e02b      	b.n	80038f2 <UART_SetConfig+0x212>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a33      	ldr	r2, [pc, #204]	; (800396c <UART_SetConfig+0x28c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d124      	bne.n	80038ee <UART_SetConfig+0x20e>
 80038a4:	4b2d      	ldr	r3, [pc, #180]	; (800395c <UART_SetConfig+0x27c>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80038ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b0:	d011      	beq.n	80038d6 <UART_SetConfig+0x1f6>
 80038b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b6:	d817      	bhi.n	80038e8 <UART_SetConfig+0x208>
 80038b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038bc:	d011      	beq.n	80038e2 <UART_SetConfig+0x202>
 80038be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038c2:	d811      	bhi.n	80038e8 <UART_SetConfig+0x208>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <UART_SetConfig+0x1f0>
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038cc:	d006      	beq.n	80038dc <UART_SetConfig+0x1fc>
 80038ce:	e00b      	b.n	80038e8 <UART_SetConfig+0x208>
 80038d0:	2300      	movs	r3, #0
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e00d      	b.n	80038f2 <UART_SetConfig+0x212>
 80038d6:	2302      	movs	r3, #2
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e00a      	b.n	80038f2 <UART_SetConfig+0x212>
 80038dc:	2304      	movs	r3, #4
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e007      	b.n	80038f2 <UART_SetConfig+0x212>
 80038e2:	2308      	movs	r3, #8
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e004      	b.n	80038f2 <UART_SetConfig+0x212>
 80038e8:	2310      	movs	r3, #16
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e001      	b.n	80038f2 <UART_SetConfig+0x212>
 80038ee:	2310      	movs	r3, #16
 80038f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fa:	d16b      	bne.n	80039d4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80038fc:	7ffb      	ldrb	r3, [r7, #31]
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d838      	bhi.n	8003974 <UART_SetConfig+0x294>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0x228>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	0800392d 	.word	0x0800392d
 800390c:	08003935 	.word	0x08003935
 8003910:	0800393d 	.word	0x0800393d
 8003914:	08003975 	.word	0x08003975
 8003918:	08003943 	.word	0x08003943
 800391c:	08003975 	.word	0x08003975
 8003920:	08003975 	.word	0x08003975
 8003924:	08003975 	.word	0x08003975
 8003928:	0800394b 	.word	0x0800394b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392c:	f7ff fc28 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8003930:	61b8      	str	r0, [r7, #24]
        break;
 8003932:	e024      	b.n	800397e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003934:	f7ff fc46 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8003938:	61b8      	str	r0, [r7, #24]
        break;
 800393a:	e020      	b.n	800397e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <UART_SetConfig+0x290>)
 800393e:	61bb      	str	r3, [r7, #24]
        break;
 8003940:	e01d      	b.n	800397e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003942:	f7ff fbbd 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 8003946:	61b8      	str	r0, [r7, #24]
        break;
 8003948:	e019      	b.n	800397e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394e:	61bb      	str	r3, [r7, #24]
        break;
 8003950:	e015      	b.n	800397e <UART_SetConfig+0x29e>
 8003952:	bf00      	nop
 8003954:	efff69f3 	.word	0xefff69f3
 8003958:	40013800 	.word	0x40013800
 800395c:	40021000 	.word	0x40021000
 8003960:	40004400 	.word	0x40004400
 8003964:	40004800 	.word	0x40004800
 8003968:	40004c00 	.word	0x40004c00
 800396c:	40005000 	.word	0x40005000
 8003970:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	77bb      	strb	r3, [r7, #30]
        break;
 800397c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d073      	beq.n	8003a6c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	005a      	lsls	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	441a      	add	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b0f      	cmp	r3, #15
 800399e:	d916      	bls.n	80039ce <UART_SetConfig+0x2ee>
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a6:	d212      	bcs.n	80039ce <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f023 030f 	bic.w	r3, r3, #15
 80039b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	b29a      	uxth	r2, r3
 80039be:	89fb      	ldrh	r3, [r7, #14]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	89fa      	ldrh	r2, [r7, #14]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	e04e      	b.n	8003a6c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	77bb      	strb	r3, [r7, #30]
 80039d2:	e04b      	b.n	8003a6c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d827      	bhi.n	8003a2a <UART_SetConfig+0x34a>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x300>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a2b 	.word	0x08003a2b
 80039f0:	08003a1b 	.word	0x08003a1b
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a2b 	.word	0x08003a2b
 80039fc:	08003a2b 	.word	0x08003a2b
 8003a00:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7ff fbbc 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8003a08:	61b8      	str	r0, [r7, #24]
        break;
 8003a0a:	e013      	b.n	8003a34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7ff fbda 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8003a10:	61b8      	str	r0, [r7, #24]
        break;
 8003a12:	e00f      	b.n	8003a34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <UART_SetConfig+0x3a4>)
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e00c      	b.n	8003a34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7ff fb51 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 8003a1e:	61b8      	str	r0, [r7, #24]
        break;
 8003a20:	e008      	b.n	8003a34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	61bb      	str	r3, [r7, #24]
        break;
 8003a28:	e004      	b.n	8003a34 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	77bb      	strb	r3, [r7, #30]
        break;
 8003a32:	bf00      	nop
    }

    if (pclk != 0U)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d018      	beq.n	8003a6c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	085a      	lsrs	r2, r3, #1
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b0f      	cmp	r3, #15
 8003a52:	d909      	bls.n	8003a68 <UART_SetConfig+0x388>
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5a:	d205      	bcs.n	8003a68 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e001      	b.n	8003a6c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a78:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	007a1200 	.word	0x007a1200

08003a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01a      	beq.n	8003b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b86:	d10a      	bne.n	8003b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b098      	sub	sp, #96	; 0x60
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bdc:	f7fc ff3a 	bl	8000a54 <HAL_GetTick>
 8003be0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d12e      	bne.n	8003c4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f88c 	bl	8003d1c <UART_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d021      	beq.n	8003c4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e6      	bne.n	8003c0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e062      	b.n	8003d14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d149      	bne.n	8003cf0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c64:	2200      	movs	r2, #0
 8003c66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f856 	bl	8003d1c <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d03c      	beq.n	8003cf0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	623b      	str	r3, [r7, #32]
   return(result);
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
 8003c96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3308      	adds	r3, #8
 8003cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc8:	61fa      	str	r2, [r7, #28]
 8003cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	69b9      	ldr	r1, [r7, #24]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e5      	bne.n	8003ca8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e011      	b.n	8003d14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3758      	adds	r7, #88	; 0x58
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2c:	e04f      	b.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d34:	d04b      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7fc fe8d 	bl	8000a54 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e04e      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d037      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d034      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d031      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d110      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f838 	bl	8003df6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e029      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da8:	d111      	bne.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f81e 	bl	8003df6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e00f      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d0a0      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b095      	sub	sp, #84	; 0x54
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e6      	bne.n	8003dfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d118      	bne.n	8003e9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f023 0310 	bic.w	r3, r3, #16
 8003e80:	647b      	str	r3, [r7, #68]	; 0x44
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6979      	ldr	r1, [r7, #20]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	613b      	str	r3, [r7, #16]
   return(result);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e6      	bne.n	8003e6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003eb2:	bf00      	nop
 8003eb4:	3754      	adds	r7, #84	; 0x54
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <memset>:
 8003ebe:	4402      	add	r2, r0
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d100      	bne.n	8003ec8 <memset+0xa>
 8003ec6:	4770      	bx	lr
 8003ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8003ecc:	e7f9      	b.n	8003ec2 <memset+0x4>
	...

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4d0d      	ldr	r5, [pc, #52]	; (8003f08 <__libc_init_array+0x38>)
 8003ed4:	4c0d      	ldr	r4, [pc, #52]	; (8003f0c <__libc_init_array+0x3c>)
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	2600      	movs	r6, #0
 8003edc:	42a6      	cmp	r6, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	4d0b      	ldr	r5, [pc, #44]	; (8003f10 <__libc_init_array+0x40>)
 8003ee2:	4c0c      	ldr	r4, [pc, #48]	; (8003f14 <__libc_init_array+0x44>)
 8003ee4:	f000 f818 	bl	8003f18 <_init>
 8003ee8:	1b64      	subs	r4, r4, r5
 8003eea:	10a4      	asrs	r4, r4, #2
 8003eec:	2600      	movs	r6, #0
 8003eee:	42a6      	cmp	r6, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef8:	4798      	blx	r3
 8003efa:	3601      	adds	r6, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f02:	4798      	blx	r3
 8003f04:	3601      	adds	r6, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	08003f68 	.word	0x08003f68
 8003f0c:	08003f68 	.word	0x08003f68
 8003f10:	08003f68 	.word	0x08003f68
 8003f14:	08003f6c 	.word	0x08003f6c

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
